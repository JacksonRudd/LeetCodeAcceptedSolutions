//https://leetcode.com/problems/string-to-integer-atoi/

import java.util.HashMap;
import java.util.Map;

class Solution {
	public int myAtoi(String string) {
		// TODO Auto-generated method stub
        char[] array = string.toCharArray();
        Map<Character, Integer> map = new HashMap<Character, Integer>();
        map.put('0',0);
        map.put('1',1);
        map.put('2',2);
        map.put('3',3);
        map.put('4',4);
        map.put('5',5);
        map.put('6',6);
        map.put('7',7);
        map.put('8',8);
        map.put('9',9);
		int sum = 0;
		boolean firstHalf = true;
		boolean positive = true;
		
        for(Character a : array){
        	if(firstHalf){
        		if(a == ' '){
        			continue;
        		}
        		else if(a == '+' ){
        			firstHalf = false;
        			continue;
        		}
        		else if(a == '-' ){
        			positive = false;
        			firstHalf = false;
        			continue;
        		} else{
        			firstHalf = false;
        		}
        		
        	}	
    		if (!map.containsKey(a)){
        		break;
        	}
    		if(positive == true){
    			try{
    				sum = addPositive(multiply(sum, 10), map.get(a));
    			} catch(Exception e){
    				System.out.print("OVERFLOW");
    				return Integer.MAX_VALUE;
    			}

    		}else{
    			try{
    				sum = subtractPositive(multiply(sum, 10), map.get(a));
    			} catch(Exception e){
    				System.out.print("OVERFLOW");
    				return Integer.MIN_VALUE;
    			}
    			
    		}
			
		}
        return sum;

    }

	private Integer addPositive(Integer a, Integer b) throws Exception  {
		Integer sum = a + b;
		if(sum<0){
			System.out.println("OVERFLOW ADDITION");
			throw new Exception();
		}else{
			return sum;
		}
	}
	
	private Integer subtractPositive(Integer a, Integer b) throws Exception  {
		Integer sum = a - b;
		if(sum > 0){
			System.out.println("OVERFLOW subtraction");
			throw new Exception();
		}else{
			return sum;
		}
	}

	private Integer multiply(Integer a, Integer b) throws Exception {
		Integer prod = a*b;
		if(prod/b != a){
			throw new Exception();
		}
		else{
			return a*b;
		}
	
	}
	

}